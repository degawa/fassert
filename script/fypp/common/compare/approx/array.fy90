#:include "../../../common.fypp"
module fassert_common_compare_approx_array
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    public :: are_approx_equal

    interface are_approx_equal
        #:for kind in REAL_KINDS + COMPLEX_KINDS
        #:for rank in RANKS
        procedure :: are_all_values_approx_equal_rank${rank}$_${kind}$
        #:endfor
        #:endfor
    end interface

contains
    #:for kind, type in REAL_KINDS_TYPES
    #:for rank in RANKS
    !>二つの配列の全要素の差が許容値以下の場合に`.true.`，そうでない場合`.false.`を返す．
    pure function are_all_values_approx_equal_rank${rank}$_${kind}$(array1, array2, tolerance) result(are_same)
        implicit none
        ${type}$, intent(in) :: array1${rank_suffix(rank)}$
        ${type}$, intent(in) :: array2${rank_suffix(rank)}$
        ${type}$, intent(in) :: tolerance
        logical :: are_same

        are_same = all(abs(array1 - array2) <= tolerance)
    end function are_all_values_approx_equal_rank${rank}$_${kind}$

    #:endfor
    #:endfor
    #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
    #:set kind = kind_type[0]
    #:set type = kind_type[1]
    #:set rkind, rtype = REAL_KINDS_TYPES[i]
    #:for rank in RANKS
    !>二つの配列の全要素の差が許容値以下の場合に`.true.`，そうでない場合`.false.`を返す．
    pure function are_all_values_approx_equal_rank${rank}$_${kind}$(array1, array2, tolerance) result(are_same)
        implicit none
        ${type}$, intent(in) :: array1${rank_suffix(rank)}$
        ${type}$, intent(in) :: array2${rank_suffix(rank)}$
        ${rtype}$, intent(in) :: tolerance
        logical :: are_same

        are_same = all(abs(array1 - array2) <= tolerance)
    end function are_all_values_approx_equal_rank${rank}$_${kind}$

    #:endfor
    #:endfor
end module fassert_common_compare_approx_array
