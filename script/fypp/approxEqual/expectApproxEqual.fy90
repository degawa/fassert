#:include "../common.fypp"
module expectApproxEqual
    use, intrinsic :: iso_fortran_env
    use :: fassert_common_check
    use :: fassert_common_message
    use :: fassert_common_status
    use :: fassert_common_message_outputOnFailure_toUnit_equal
    implicit none
    private
    public :: expect_approx_equal

    interface expect_approx_equal
        #:for kind in REAL_KINDS + COMPLEX_KINDS
        procedure :: expect_approx_equal_${kind}$
        #:endfor
        #:for rank in RANKS
        #:for kind in REAL_KINDS + COMPLEX_KINDS
        procedure :: expect_approx_equal_${kind}$_rank${rank}$
        #:endfor
        #:endfor

        #:for kind in REAL_KINDS + COMPLEX_KINDS
        procedure :: expect_approx_equal_${kind}$_msg
        #:endfor
        #:for rank in RANKS
        #:for kind in REAL_KINDS + COMPLEX_KINDS
        procedure :: expect_approx_equal_${kind}$_rank${rank}$_msg
        #:endfor
        #:endfor
    end interface

    interface
        #:for kind, type in REAL_KINDS_TYPES
        !>実測値`actual`と予測値`expected`の差が
        !>許容値`tolerance`より小さいかを検査する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_approx_equal_${kind}$(actual, expected, test_name, stat, &
                                                    tolerance, &
                                                    verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${type}$, intent(in) :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値，それらの差を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_approx_equal_${kind}$

        #:endfor
        #:for kind, type in REAL_KINDS_TYPES
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の各要素の差が
        !>許容値`tolerance`より小さいかを検査する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_approx_equal_${kind}$_rank${rank}$(actual, expected, test_name, stat, &
                                                          tolerance, &
                                                          verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${type}$, intent(in) :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_approx_equal_${kind}$_rank${rank}$

        #:endfor
        #:endfor
        #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
        #:set kind = kind_type[0]
        #:set type = kind_type[1]
        #:set rtype = REAL_TYPES[i]
        !>実測値`actual`と予測値`expected`の差が
        !>許容値`tolerance`より小さいかを検査する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_approx_equal_${kind}$(actual, expected, test_name, stat, &
                                                    tolerance, &
                                                    verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${rtype}$, intent(in) :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値，それらの差を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_approx_equal_${kind}$

        #:endfor
        #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
        #:set kind = kind_type[0]
        #:set type = kind_type[1]
        #:set rtype = REAL_TYPES[i]
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の各要素の差が
        !>許容値`tolerance`より小さいかを検査する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_approx_equal_${kind}$_rank${rank}$(actual, expected, test_name, stat, &
                                                          tolerance, &
                                                          verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${rtype}$, intent(in) :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_approx_equal_${kind}$_rank${rank}$

        #:endfor
        #:endfor
    end interface

    interface
        #:for kind, type in REAL_KINDS_TYPES
        !>実測値`actual`と予測値`expected`の差が
        !>許容値`tolerance`より小さいかを検査し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_approx_equal_${kind}$_msg(actual, expected, test_name, stat, &
                                                             tolerance, &
                                                             verbose, expected_failure, quiet, &
                                                             output_message)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${type}$, intent(in) :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値，それらの差を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_approx_equal_${kind}$_msg

        #:endfor
        #:for kind, type in REAL_KINDS_TYPES
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の各要素の差が
        !>許容値`tolerance`より小さいかを検査し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_approx_equal_${kind}$_rank${rank}$_msg(actual, expected, test_name, stat, &
                                                                   tolerance, &
                                                                   verbose, expected_failure, quiet, &
                                                                   output_message)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${type}$, intent(in) :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_approx_equal_${kind}$_rank${rank}$_msg

        #:endfor
        #:endfor
        #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
        #:set kind = kind_type[0]
        #:set type = kind_type[1]
        #:set rtype = REAL_TYPES[i]
        !>実測値`actual`と予測値`expected`の差が
        !>許容値`tolerance`より小さいかを検査し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_approx_equal_${kind}$_msg(actual, expected, test_name, stat, &
                                                             tolerance, &
                                                             verbose, expected_failure, quiet, &
                                                             output_message)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${rtype}$, intent(in) :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値，それらの差を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_approx_equal_${kind}$_msg

        #:endfor
        #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
        #:set kind = kind_type[0]
        #:set type = kind_type[1]
        #:set rtype = REAL_TYPES[i]
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の各要素の差が
        !>許容値`tolerance`より小さいかを検査し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_approx_equal_${kind}$_rank${rank}$_msg(actual, expected, test_name, stat, &
                                                                   tolerance, &
                                                                   verbose, expected_failure, quiet, &
                                                                   output_message)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${rtype}$, intent(in) :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_approx_equal_${kind}$_rank${rank}$_msg

        #:endfor
        #:endfor
    end interface
end module expectApproxEqual
