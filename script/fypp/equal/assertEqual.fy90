#:include "../common.fypp"
module assertEqual
    use, intrinsic :: iso_fortran_env
    use :: expectEqual
    use :: fassert_common_halt
    implicit none
    private
    public :: assert_equal

    interface assert_equal
        #:for kind in INTEGER_KINDS
        procedure :: assert_equal_${kind}$
        #:endfor
        #:for rank in RANKS
        #:for kind in INTEGER_KINDS
        procedure :: assert_equal_${kind}$_rank${rank}$
        #:endfor
        #:endfor
        #:for kind in REAL_KINDS
        procedure :: assert_approxequal_${kind}$
        #:endfor
        #:for rank in RANKS
        #:for kind in REAL_KINDS
        procedure :: assert_approxequal_${kind}$_rank${rank}$
        #:endfor
        #:endfor
        #:for kind in COMPLEX_KINDS
        procedure :: assert_approxequal_${kind}$
        #:endfor
        #:for rank in RANKS
        #:for kind in COMPLEX_KINDS
        procedure :: assert_approxequal_${kind}$_rank${rank}$
        #:endfor
        #:endfor
        procedure :: assert_equiv_logical
        #:for rank in RANKS
        procedure :: assert_equiv_logical_rank${rank}$
        #:endfor
        procedure :: assert_equal_char
        #:for rank in RANKS
        procedure :: assert_equal_char_rank${rank}$
        #:endfor
        procedure :: assert_equal_user_defined
        #:for rank in RANKS
        procedure :: assert_equal_user_defined_rank${rank}$
        #:endfor
    end interface

contains
    #:for kind, type in INTEGER_KINDS_TYPES
    !>実測値`actual`と予測値`expected`の等値性を比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_equal_${kind}$(actual, expected, test_name, &
                                 verbose, expected_failure, quiet)
        implicit none
        ${type}$, intent(in) :: actual
            !! 実測値
        ${type}$, intent(in) :: expected
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_equal_${kind}$

    #:endfor

    #:for kind, type in INTEGER_KINDS_TYPES
    #:for rank in RANKS
    !>実測値`actual`と予測値`expected`の全要素の等値性を比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_equal_${kind}$_rank${rank}$(actual, expected, test_name, &
                                        verbose, expected_failure, quiet)
        implicit none

        ${type}$, intent(in) :: actual${rank_suffix(rank)}$
            !! 実測値
        ${type}$, intent(in) :: expected${rank_suffix(rank)}$
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(in), optional :: verbose
            !! 実測値と予測値の差の最大・最小値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_equal_${kind}$_rank${rank}$

    #:endfor
    #:endfor

    #:for kind, type in REAL_KINDS_TYPES
    !>実測値`actual`と予測値`expected`の差が許容値`tolerance`より小さいかを比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_approxequal_${kind}$(actual, expected, test_name, &
                                         tolerance, &
                                         verbose, expected_failure, quiet)
        implicit none

        ${type}$, intent(in) :: actual
            !! 実測値
        ${type}$, intent(in) :: expected
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        ${type}$, intent(in), optional :: tolerance
            !! 実測値と予測値が等しいと見なす許容値
        logical, intent(in), optional :: verbose
            !! 実測値と予測値，それらの差を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, tolerance, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_approxequal_${kind}$

    #:endfor

    #:for kind, type in REAL_KINDS_TYPES
    #:for rank in RANKS
    !>実測値`actual`と予測値`expected`の各要素の差が許容値`tolerance`より小さいかを比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_approxequal_${kind}$_rank${rank}$(actual, expected, test_name, &
                                               tolerance, &
                                               verbose, expected_failure, quiet)
        implicit none

        ${type}$, intent(in) :: actual${rank_suffix(rank)}$
            !! 実測値
        ${type}$, intent(in) :: expected${rank_suffix(rank)}$
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        ${type}$, intent(in), optional :: tolerance
            !! 実測値と予測値が等しいと見なす許容値
        logical, intent(in), optional :: verbose
            !! 実測値と予測値の差の最大・最小値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, tolerance, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_approxequal_${kind}$_rank${rank}$

    #:endfor
    #:endfor

    #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
    #:set kind = kind_type[0]
    #:set type = kind_type[1]
    #:set rtype = REAL_TYPES[i]
    !>実測値`actual`と予測値`expected`の差が許容値`tolerance`より小さいかを比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_approxequal_${kind}$(actual, expected, test_name, &
                                            tolerance, &
                                            verbose, expected_failure, quiet)
        implicit none

        ${type}$, intent(in) :: actual
            !! 実測値
        ${type}$, intent(in) :: expected
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        ${rtype}$, intent(in), optional :: tolerance
            !! 実測値と予測値が等しいと見なす許容値
        logical, intent(in), optional :: verbose
            !! 実測値と予測値，それらの差を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, tolerance, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_approxequal_${kind}$

    #:endfor

    #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
    #:set kind = kind_type[0]
    #:set type = kind_type[1]
    #:set rtype = REAL_TYPES[i]
    #:for rank in RANKS
    !>実測値`actual`と予測値`expected`の差が許容値`tolerance`より小さいかを比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_approxequal_${kind}$_rank${rank}$(actual, expected, test_name, &
                                            tolerance, &
                                            verbose, expected_failure, quiet)
        implicit none

        ${type}$, intent(in) :: actual${rank_suffix(rank)}$
            !! 実測値
        ${type}$, intent(in) :: expected${rank_suffix(rank)}$
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        ${rtype}$, intent(in), optional :: tolerance
            !! 実測値と予測値が等しいと見なす許容値
        logical, intent(in), optional :: verbose
            !! 実測値と予測値，それらの差を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, tolerance, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_approxequal_${kind}$_rank${rank}$

    #:endfor
    #:endfor

    !>実測値`actual`と予測値`expected`が等価かを比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_equiv_logical(actual, expected, test_name, &
                                    verbose, expected_failure, quiet)
        implicit none

        logical, intent(in) :: actual
            !! 実測値
        logical, intent(in) :: expected
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_equiv_logical

    #:for rank in RANKS
    !>実測値`actual`と予測値`expected`が等価かを比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_equiv_logical_rank${rank}$(actual, expected, test_name, &
                                         verbose, expected_failure, quiet)
        implicit none

        logical, intent(in) :: actual${rank_suffix(rank)}$
            !! 実測値
        logical, intent(in) :: expected${rank_suffix(rank)}$
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_equiv_logical_rank${rank}$

    #:endfor

    !>実測値`actual`と予測値`expected`が同じ文字列かを比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_equal_char(actual, expected, test_name, &
                                verbose, expected_failure, quiet)
        implicit none

        character(*), intent(in) :: actual
            !! 実測値
        character(*), intent(in) :: expected
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_equal_char

    #:for rank in RANKS
    !>実測値`actual`と予測値`expected`の全要素の等値性を比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_equal_char_rank${rank}$(actual, expected, test_name, &
                                           verbose, expected_failure, quiet)
        implicit none

        character(*), intent(in) :: actual${rank_suffix(rank)}$
            !! 実測値
        character(*), intent(in) :: expected${rank_suffix(rank)}$
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_equal_char_rank${rank}$

    #:endfor

    !>実測値`actual`と予測値`expected`の全要素の等値性を比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>比較には，手続`comparator`が用いられる．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>実測値と予測値の出力には，手続`verbose_message_writer`
    !>が用いられる．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_equal_user_defined(actual, expected, test_name, &
                                         comparator, verbose_message_writer, &
                                         verbose, expected_failure, quiet)
        use :: fassert_interface
        class(*), intent(in) :: actual
            !! 実測値
        class(*), intent(in) :: expected
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        procedure(Iis_equal) :: comparator
            !! ユーザ定義型変数`actual`, `expected`の等価演算を行う手続
        procedure(Ioutput_on_failure_to_unit), optional :: verbose_message_writer
            !! 値の出力を行う手続
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, &
                          comparator, verbose_message_writer, &
                          verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_equal_user_defined

    #:for rank in RANKS
    !>実測値`actual`と予測値`expected`の全要素の等値性を比較する．
    !>比較結果が偽であれば，プログラムの実行を停止する．
    !>比較には，手続`comparator`が用いられる．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>実測値と予測値の出力には，手続`verbose_message_writer`
    !>が用いられる．
    !>
    !>`expected_failure`が真の場合，比較が失敗することを検査し，
    !>プログラムを停止しない．比較が成功すると停止する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine assert_equal_user_defined_rank${rank}$(actual, expected, test_name, &
                                               comparator, verbose_message_writer, &
                                               verbose, expected_failure, quiet)
        use :: fassert_interface
        class(*), intent(in) :: actual${rank_suffix(rank)}$
            !! 実測値
        class(*), intent(in) :: expected${rank_suffix(rank)}$
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        procedure(Iis_equal_rank${rank}$) :: comparator
            !! ユーザ定義型変数`actual`, `expected`の等価演算を行う手続
        procedure(Ioutput_on_failure_to_unit_rank${rank}$), optional :: verbose_message_writer
            !! 値の出力を行う手続
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: stat

        call expect_equal(actual, expected, test_name, stat, &
                          comparator, verbose_message_writer, &
                          verbose, expected_failure, quiet)
        call halt_on_failure(stat)
    end subroutine assert_equal_user_defined_rank${rank}$

    #:endfor
end module assertEqual
