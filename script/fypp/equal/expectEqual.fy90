#:include "../common.fypp"
module expectEqual
    use, intrinsic :: iso_fortran_env
    use :: fassert_common_check
    use :: fassert_common_message
    use :: fassert_common_status
    use :: fassert_common_message_outputOnFailure_toUnit_equal
    implicit none
    private
    public :: expect_equal

    interface expect_equal
        #:for kind in INTEGER_KINDS
        procedure :: expect_equal_${kind}$
        #:endfor
        #:for rank in RANKS
        #:for kind in INTEGER_KINDS
        procedure :: expect_equal_${kind}$_rank${rank}$
        #:endfor
        #:endfor
        #:for kind in REAL_KINDS + COMPLEX_KINDS
        procedure :: expect_approxequal_${kind}$
        #:endfor
        #:for rank in RANKS
        #:for kind in REAL_KINDS + COMPLEX_KINDS
        procedure :: expect_approxequal_${kind}$_rank${rank}$
        #:endfor
        #:endfor
        procedure :: expect_equiv_logical
        #:for rank in RANKS
        procedure :: expect_equiv_logical_rank${rank}$
        #:endfor
        procedure :: expect_equal_char
        #:for rank in RANKS
        procedure :: expect_equal_char_rank${rank}$
        #:endfor

        #:for kind in INTEGER_KINDS
        procedure :: expect_equal_${kind}$_msg
        #:endfor
        #:for rank in RANKS
        #:for kind in INTEGER_KINDS
        procedure :: expect_equal_${kind}$_rank${rank}$_msg
        #:endfor
        #:endfor
        #:for kind in REAL_KINDS + COMPLEX_KINDS
        procedure :: expect_approxequal_${kind}$_msg
        #:endfor
        #:for rank in RANKS
        #:for kind in REAL_KINDS + COMPLEX_KINDS
        procedure :: expect_approxequal_${kind}$_rank${rank}$_msg
        #:endfor
        #:endfor
        procedure :: expect_equiv_logical_msg
        #:for rank in RANKS
        procedure :: expect_equiv_logical_rank${rank}$_msg
        #:endfor
        procedure :: expect_equal_char_msg
        #:for rank in RANKS
        procedure :: expect_equal_char_rank${rank}$_msg
        #:endfor

        procedure :: expect_equal_user_defined
        procedure :: expect_equal_user_defined_msg
        #:for rank in RANKS
        procedure :: expect_equal_user_defined_rank${rank}$
        procedure :: expect_equal_user_defined_rank${rank}$_msg
        #:endfor
    end interface

    interface
        #:for kind, type in INTEGER_KINDS_TYPES
        !>実測値`actual`と予測値`expected`の等値性を比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_equal_${kind}$(actual, expected, test_name, stat, &
                                            verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_equal_${kind}$

        #:endfor

        #:for kind, type in INTEGER_KINDS_TYPES
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の全要素の等値性を比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_equal_${kind}$_rank${rank}$(actual, expected, test_name, stat, &
                                                   verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_equal_${kind}$_rank${rank}$

        #:endfor
        #:endfor

        #:for kind, type in REAL_KINDS_TYPES
        !>実測値`actual`と予測値`expected`の差が
        !>許容値`tolerance`より小さいかを比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_approxequal_${kind}$(actual, expected, test_name, stat, &
                                                    tolerance, &
                                                    verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${type}$, intent(in), optional :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値，それらの差を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_approxequal_${kind}$

        #:endfor

        #:for kind, type in REAL_KINDS_TYPES
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の各要素の差が
        !>許容値`tolerance`より小さいかを比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_approxequal_${kind}$_rank${rank}$(actual, expected, test_name, stat, &
                                                          tolerance, &
                                                          verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${type}$, intent(in), optional :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_approxequal_${kind}$_rank${rank}$

        #:endfor
        #:endfor

        #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
        #:set kind = kind_type[0]
        #:set type = kind_type[1]
        #:set rtype = REAL_TYPES[i]
        !>実測値`actual`と予測値`expected`の差が
        !>許容値`tolerance`より小さいかを比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_approxequal_${kind}$(actual, expected, test_name, stat, &
                                                    tolerance, &
                                                    verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${rtype}$, intent(in), optional :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値，それらの差を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_approxequal_${kind}$

        #:endfor

        #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
        #:set kind = kind_type[0]
        #:set type = kind_type[1]
        #:set rtype = REAL_TYPES[i]
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の各要素の差が
        !>許容値`tolerance`より小さいかを比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_approxequal_${kind}$_rank${rank}$(actual, expected, test_name, stat, &
                                                          tolerance, &
                                                          verbose, expected_failure, quiet)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${rtype}$, intent(in), optional :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_approxequal_${kind}$_rank${rank}$

        #:endfor
        #:endfor

        !>実測値`actual`と予測値`expected`が等価かを比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_equiv_logical(actual, expected, test_name, stat, &
                                               verbose, expected_failure, quiet)
            logical, intent(in) :: actual
                !! 実測値
            logical, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_equiv_logical


        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`が等価かを比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_equiv_logical_rank${rank}$(actual, expected, test_name, stat, &
                                                     verbose, expected_failure, quiet)
            logical, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            logical, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_equiv_logical_rank${rank}$

        #:endfor

        !>実測値`actual`と予測値`expected`が同じ文字列かを比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_equal_char(actual, expected, test_name, stat, &
                                           verbose, expected_failure, quiet)
            character(*), intent(in) :: actual
                !! 実測値
            character(*), intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が同じ文字列の場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_equal_char

        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の全要素の等値性を比較する．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        module subroutine expect_equal_char_rank${rank}$(actual, expected, test_name, stat, &
                                                  verbose, expected_failure, quiet)
            character(*), intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            character(*), intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値の全要素が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
        end subroutine expect_equal_char_rank${rank}$

        #:endfor
    end interface

    interface
        #:for kind, type in INTEGER_KINDS_TYPES
        !>実測値`actual`と予測値`expected`の等値性を比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_equal_${kind}$_msg(actual, expected, test_name, stat, &
                                                     verbose, expected_failure, quiet, &
                                                     output_message)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_equal_${kind}$_msg

        #:endfor

        #:for kind, type in INTEGER_KINDS_TYPES
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の全要素の等値性を比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_equal_${kind}$_rank${rank}$_msg(actual, expected, test_name, stat, &
                                                            verbose, expected_failure, quiet, &
                                                            output_message)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_equal_${kind}$_rank${rank}$_msg

        #:endfor
        #:endfor

        #:for kind, type in REAL_KINDS_TYPES
        !>実測値`actual`と予測値`expected`の差が
        !>許容値`tolerance`より小さいかを比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_approxequal_${kind}$_msg(actual, expected, test_name, stat, &
                                                             tolerance, &
                                                             verbose, expected_failure, quiet, &
                                                             output_message)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${type}$, intent(in), optional :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値，それらの差を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_approxequal_${kind}$_msg

        #:endfor

        #:for kind, type in REAL_KINDS_TYPES
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の各要素の差が
        !>許容値`tolerance`より小さいかを比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_approxequal_${kind}$_rank${rank}$_msg(actual, expected, test_name, stat, &
                                                                   tolerance, &
                                                                   verbose, expected_failure, quiet, &
                                                                   output_message)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${type}$, intent(in), optional :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_approxequal_${kind}$_rank${rank}$_msg

        #:endfor
        #:endfor

        #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
        #:set kind = kind_type[0]
        #:set type = kind_type[1]
        #:set rtype = REAL_TYPES[i]
        !>実測値`actual`と予測値`expected`の差が
        !>許容値`tolerance`より小さいかを比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値，それらの差を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_approxequal_${kind}$_msg(actual, expected, test_name, stat, &
                                                             tolerance, &
                                                             verbose, expected_failure, quiet, &
                                                             output_message)
            ${type}$, intent(in) :: actual
                !! 実測値
            ${type}$, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${rtype}$, intent(in), optional :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値，それらの差を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_approxequal_${kind}$_msg

        #:endfor

        #:for i, kind_type in enumerate(COMPLEX_KINDS_TYPES)
        #:set kind = kind_type[0]
        #:set type = kind_type[1]
        #:set rtype = REAL_TYPES[i]
        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の各要素の差が
        !>許容値`tolerance`より小さいかを比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値の差の最大・最小値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_approxequal_${kind}$_rank${rank}$_msg(actual, expected, test_name, stat, &
                                                                   tolerance, &
                                                                   verbose, expected_failure, quiet, &
                                                                   output_message)
            ${type}$, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            ${type}$, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が許容値以下の場合`.true.`，
                !! そうでない場合`.false.`
            ${rtype}$, intent(in), optional :: tolerance
                !! 実測値と予測値が等しいと見なす許容値
            logical, intent(in), optional :: verbose
                !! 実測値と予測値の差の最大・最小値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_approxequal_${kind}$_rank${rank}$_msg

        #:endfor
        #:endfor

        !>実測値`actual`と予測値`expected`が等価かを比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_equiv_logical_msg(actual, expected, test_name, stat, &
                                                        verbose, expected_failure, quiet, &
                                                        output_message)
            logical, intent(in) :: actual
                !! 実測値
            logical, intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_equiv_logical_msg

        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`が等価かを比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_equiv_logical_rank${rank}$_msg(actual, expected, test_name, stat, &
                                                             verbose, expected_failure, quiet, &
                                                             output_message)
            logical, intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            logical, intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_equiv_logical_rank${rank}$_msg

        #:endfor

        !>実測値`actual`と予測値`expected`が同じ文字列かを比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_equal_char_msg(actual, expected, test_name, stat, &
                                                    verbose, expected_failure, quiet, &
                                                    output_message)
            character(*), intent(in) :: actual
                !! 実測値
            character(*), intent(in) :: expected
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値が同じ文字列の場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_equal_char_msg

        #:for rank in RANKS
        !>実測値`actual`と予測値`expected`の全要素の等値性を比較し，
        !>出力を`output_message`に書き込む．
        !>
        !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
        !>
        !>`verbose`が真であれば，実測値と予測値を出力する．
        !>
        !>`expected_failure`が真であれば，比較が失敗することを検査する．
        !>
        !>`quiet`が真の場合，成功時の出力を抑制する．
        !>
        pure module subroutine expect_equal_char_rank${rank}$_msg(actual, expected, test_name, stat, &
                                                           verbose, expected_failure, quiet, &
                                                           output_message)
            character(*), intent(in) :: actual${rank_suffix(rank)}$
                !! 実測値
            character(*), intent(in) :: expected${rank_suffix(rank)}$
                !! 予測値
            character(*), intent(in) :: test_name
                !! テスト名
            logical, intent(out) :: stat
                !! 比較結果の真偽値<br>
                !! 実測値と予測値の全要素が等しい場合`.true.`，
                !! そうでない場合`.false.`
            logical, intent(in), optional :: verbose
                !! 実測値と予測値を出力するフラグ
            logical, intent(in), optional :: expected_failure
                !! 予期された失敗を検査するかのフラグ
            logical, intent(in), optional :: quiet
                !! 成功時に出力を抑制するかのフラグ
            character(:), allocatable, intent(out) :: output_message
                !! 出力を格納する文字列
        end subroutine expect_equal_char_rank${rank}$_msg

        #:endfor
    end interface

contains
    !>実測値`actual`と予測値`expected`の等値性を比較する．
    !>比較には，手続`comparator`が用いられる．
    !>
    !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>実測値と予測値の出力には，手続`verbose_message_writer`
    !>が用いられる．
    !>
    !>`expected_failure`が真であれば，比較が失敗することを検査する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine expect_equal_user_defined(actual, expected, test_name, stat, &
                                         comparator, verbose_message_writer, &
                                         verbose, expected_failure, quiet)
        use :: fassert_interface
        implicit none
        class(*), intent(in) :: actual
            !! 実測値
        class(*), intent(in) :: expected
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(out) :: stat
            !! 比較結果の真偽値<br>
            !! 実測値と予測値が等しい場合`.true.`，
            !! そうでない場合`.false.`
        procedure(Iis_equal) :: comparator
            !! ユーザ定義型変数`actual`, `expected`の等価演算を行う手続
        procedure(Ioutput_on_failure_to_unit), optional :: verbose_message_writer
            !! 値の出力を行う手続
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: has_same_value

        has_same_value = comparator(actual, expected)
        if (is_test_of_expected_failure(expected_failure)) then
            call check_expected_failure(has_same_value, test_name, stat, quiet)
        else
            call check_true(has_same_value, test_name, stat, quiet)
        end if

        if (is_verbose_output(stat, verbose, quiet) &
            .and. present(verbose_message_writer)) &
            call verbose_message_writer(actual, expected)
    end subroutine expect_equal_user_defined

    !>実測値`actual`と予測値`expected`の等値性を比較し，
    !>出力を`output_message`に書き込む．
    !>比較には，手続`comparator`が用いられる．
    !>
    !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>実測値と予測値の出力には，手続`verbose_message_writer`
    !>が用いられる．
    !>
    !>`expected_failure`が真であれば，比較が失敗することを検査する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine expect_equal_user_defined_msg(actual, expected, test_name, stat, &
                                             comparator, verbose_message_writer, &
                                             verbose, expected_failure, quiet, &
                                             output_message)
        use :: fassert_interface
        implicit none
        class(*), intent(in) :: actual
            !! 実測値
        class(*), intent(in) :: expected
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(out) :: stat
            !! 比較結果の真偽値<br>
            !! 実測値と予測値が等しい場合`.true.`，
            !! そうでない場合`.false.`
        procedure(Iis_equal) :: comparator
            !! ユーザ定義型変数`actual`, `expected`の等価演算を行う手続
        procedure(Ioutput_on_failure_to_string), optional :: verbose_message_writer
            !! 値の出力を行う手続
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ
        character(:), allocatable, intent(out) :: output_message
            !! 出力を格納する文字列

        logical :: has_same_value

        has_same_value = comparator(actual, expected)
        if (is_test_of_expected_failure(expected_failure)) then
            call check_expected_failure(has_same_value, test_name, stat, quiet, output_message)
        else
            call check_true(has_same_value, test_name, stat, quiet, output_message)
        end if

        if (is_verbose_output(stat, verbose, quiet) &
            .and. present(verbose_message_writer)) &
            call verbose_message_writer(actual, expected, output_message)
    end subroutine expect_equal_user_defined_msg

    #:for rank in RANKS
    !>実測値`actual`と予測値`expected`の等値性を比較する．
    !>比較には，手続`comparator`が用いられる．
    !>
    !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>実測値と予測値の出力には，手続`verbose_message_writer`
    !>が用いられる．
    !>
    !>`expected_failure`が真であれば，比較が失敗することを検査する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    subroutine expect_equal_user_defined_rank${rank}$(actual, expected, test_name, stat, &
                                               comparator, verbose_message_writer, &
                                               verbose, expected_failure, quiet)
        use :: fassert_interface
        use :: expectSameShape
        implicit none
        class(*), intent(in) :: actual${rank_suffix(rank)}$
            !! 実測値
        class(*), intent(in) :: expected${rank_suffix(rank)}$
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(out) :: stat
            !! 比較結果の真偽値<br>
            !! 実測値と予測値が等しい場合`.true.`，
            !! そうでない場合`.false.`
        procedure(Iis_equal_rank${rank}$) :: comparator
            !! ユーザ定義型変数`actual`, `expected`の等価演算を行う手続
        procedure(Ioutput_on_failure_to_unit_rank${rank}$), optional :: verbose_message_writer
            !! 値の出力を行う手続
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ

        logical :: has_same_value

        ! 値比較の前に配列要素数を比較し，異なっていれば失敗とする．
        block
            logical :: array_shape_stat
            character(:), allocatable :: shape_check_msg

            call expect_same_shape(actual, expected, test_name//note_shape_check, array_shape_stat, &
                                   verbose=verbose, quiet=quiet, output_message=shape_check_msg)
            if (is_test_failed(array_shape_stat)) then
                stat = failed
                call write_message(shape_check_msg)
                return
            end if
        end block

        has_same_value = comparator(actual, expected)
        if (is_test_of_expected_failure(expected_failure)) then
            call check_expected_failure(has_same_value, test_name, stat, quiet)
        else
            call check_true(has_same_value, test_name, stat, quiet)
        end if

        if (is_verbose_output(stat, verbose, quiet) &
            .and. present(verbose_message_writer)) &
            call verbose_message_writer(actual, expected)
    end subroutine expect_equal_user_defined_rank${rank}$

    !>実測値`actual`と予測値`expected`の等値性を比較し，
    !>出力を`output_message`に書き込む．
    !>比較には，手続`comparator`が用いられる．
    !>
    !>`stat`が渡されていれば，比較結果を`stat`に書き込む．
    !>
    !>`verbose`が真であれば，実測値と予測値を出力する．
    !>実測値と予測値の出力には，手続`verbose_message_writer`
    !>が用いられる．
    !>
    !>`expected_failure`が真であれば，比較が失敗することを検査する．
    !>
    !>`quiet`が真の場合，成功時の出力を抑制する．
    !>
    pure subroutine expect_equal_user_defined_rank${rank}$_msg(actual, expected, test_name, stat, &
                                                        comparator, verbose_message_writer, &
                                                        verbose, expected_failure, quiet, &
                                                        output_message)
        use :: fassert_interface
        use :: expectSameShape
        implicit none
        class(*), intent(in) :: actual${rank_suffix(rank)}$
            !! 実測値
        class(*), intent(in) :: expected${rank_suffix(rank)}$
            !! 予測値
        character(*), intent(in) :: test_name
            !! テスト名
        logical, intent(out) :: stat
            !! 比較結果の真偽値<br>
            !! 実測値と予測値が等しい場合`.true.`，
            !! そうでない場合`.false.`
        procedure(Iis_equal_rank${rank}$) :: comparator
            !! ユーザ定義型変数`actual`, `expected`の等価演算を行う手続
        procedure(Ioutput_on_failure_to_string_rank${rank}$), optional :: verbose_message_writer
            !! 値の出力を行う手続
        logical, intent(in), optional :: verbose
            !! 実測値と予測値を出力するフラグ
        logical, intent(in), optional :: expected_failure
            !! 予期された失敗を検査するかのフラグ
        logical, intent(in), optional :: quiet
            !! 成功時に出力を抑制するかのフラグ
        character(:), allocatable, intent(out) :: output_message
            !! 出力を格納する文字列

        logical :: has_same_value

        ! 値比較の前に配列要素数を比較し，異なっていれば失敗とする．
        block
            logical :: array_shape_stat
            character(:), allocatable :: shape_check_msg

            call expect_same_shape(actual, expected, test_name//note_shape_check, array_shape_stat, &
                                   verbose=verbose, quiet=quiet, output_message=shape_check_msg)
            if (is_test_failed(array_shape_stat)) then
                stat = failed
                call write_message(output_message, shape_check_msg)
                return
            end if
        end block

        has_same_value = comparator(actual, expected)
        if (is_test_of_expected_failure(expected_failure)) then
            call check_expected_failure(has_same_value, test_name, stat, quiet, output_message)
        else
            call check_true(has_same_value, test_name, stat, quiet, output_message)
        end if

        if (is_verbose_output(stat, verbose, quiet) &
            .and. present(verbose_message_writer)) &
            call verbose_message_writer(actual, expected, output_message)
    end subroutine expect_equal_user_defined_rank${rank}$_msg

    #:endfor
end module expectEqual
